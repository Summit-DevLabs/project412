{
  "version": 3,
  "sources": ["../../../app/data/raceData.ts", "../../../app/components/RaceCard.tsx", "../../../app/routes/races.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/data/raceData.ts\"\n);\nimport.meta.hot.lastModified = \"1707076008193.368\";\n}\n// REMIX HMR END\n\n\n// date is expected to be in the format of 'DM MM' or 'DD-DD MM' (e.g. 20 Jan or 6-8 Feb)\nexport const raceData = [\n  { \n    date: '16-18 Feb',\n    raceName: 'Valley of the Sun',\n    location: 'Phoenix, AZ',\n    type: 'Road'\n  },\n  { \n    date: '17 Feb',\n    raceName: 'Trade Zone #1',\n    location: 'Upper Marlboro, MD',\n    type: 'Road'\n  },\n  { \n    date: '23-25 Feb',\n    raceName: 'Tucson Bicycle Classic',\n    location: 'Tucson, AZ',\n    type: 'Road'\n  },\n  { \n    date: '2 March',\n    raceName: 'Trade Zone #2',\n    location: 'Upper Marlboro, MD',\n    type: 'Road'\n  },\n  { \n    date: '9 March',\n    raceName: 'Trade Zone #3',\n    location: 'Upper Marlboro, MD',\n    type: 'Road'\n  },\n  { \n    date: '12-14 April',\n    raceName: 'Tour of Newport News',\n    location: 'Newport News, VA',\n    type: 'Road'\n  },\n  { \n    date: '20 April',\n    raceName: 'Barry Roubaix',\n    location: 'Barry County, MI',\n    type: 'Gravel'\n  },\n  { \n    date: '26 April',\n    raceName: 'Spartanburg Criterium',\n    location: 'Spartanburg, SC',\n    type: 'Road'\n  },\n  { \n    date: '27 April',\n    raceName: 'Athens Twilight',\n    location: 'Athens, GA',\n    type: 'Road'\n  },\n  { \n    date: '4 May',\n    raceName: 'Hagerstown Criterium',\n    location: 'Hagerstown, MD',\n    type: 'Road'\n  },\n  { \n    date: '14-19 May',\n    raceName: 'Pro Road Nationals',\n    location: 'Charleston, WV',\n    type: 'Road'\n  },\n  { \n    date: '18 May',\n    raceName: 'Wilmington Grand Prix',\n    location: 'Wilmington, DE',\n    type: 'Road'\n  },\n  { \n    date: '19 May',\n    raceName: 'Rush to Crush',\n    location: 'PGH',\n    type: 'Road'\n  },\n  { \n    date: '24-26 May',\n    raceName: 'Winston Salem Cycling Classic',\n    location: 'Winston Salem, NC',\n    type: 'Road'\n  },\n  { \n    date: '25 May',\n    raceName: 'Easton Twilight',\n    location: 'Easton, PA',\n    type: 'Road'\n  },\n  { \n    date: '26 May',\n    raceName: 'Tour of Plainfield',\n    location: 'Plainfield, NJ',\n    type: 'Road'\n  },\n  { \n    date: '27 May',\n    raceName: 'Tour of Somerville',\n    location: 'Somerville, NJ',\n    type: 'Road'\n  },\n  { \n    date: '15 June',\n    raceName: 'Giro Di Coppi',\n    location: 'Barnesville, MD',\n    type: 'Road'\n  },\n  { \n    date: '16 June',\n    raceName: 'Race Avenue',\n    location: 'Lancaster, PA',\n    type: 'Road'\n  },\n  { \n    date: '22 June',\n    raceName: 'BWR Asheville',\n    location: 'Asheville, NC',\n    type: 'Gravel'\n  },\n  { \n    date: '13 July',\n    raceName: 'Hummelstown Criterium',\n    location: 'Hummelstown, PA',\n    type: 'Road'\n  },\n  { \n    date: '18-28 July',\n    raceName: 'Intelligentsia Cup',\n    location: 'Chicago, IL',\n    type: 'Road'\n  },\n  { \n    date: '3-4 August',\n    raceName: 'Buffalo Stage Race',\n    location: 'Buffalo, NY',\n    type: 'Road'\n  },\n  { \n    date: '8 September',\n    raceName: 'Bucks County Classic',\n    location: 'Doylestown, PA',\n    type: 'Road'\n  }\n];", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/RaceCard.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/RaceCard.tsx\");\n  import.meta.hot.lastModified = \"1707089255196.8538\";\n}\n// REMIX HMR END\n\nexport default function RaceCard({\n  race,\n  isFuture\n}) {\n  const today = new Date();\n  return <div className={`bg-gray-100 p-4 rounded-md mb-4 w-[70%] ${isFuture ? 'bg-white' : 'bg-gray-400'}`}>\n\t\t\t<strong className=\"\">{race.raceName}</strong>\n\t\t\t<p className={`${!isFuture ? 'line-through' : ''}`}>{race.date}</p>\n\t\t\t<p>{race.location}</p>\n\t\t\t<p>Type: {race.type}</p>\n\t\t</div>;\n}\n_c = RaceCard;\n;\nvar _c;\n$RefreshReg$(_c, \"RaceCard\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/races.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/races.tsx\");\n  import.meta.hot.lastModified = \"1708267522559.699\";\n}\n// REMIX HMR END\n\nimport { raceData } from '../data/raceData';\nimport RaceCard from '../components/RaceCard';\nexport default function Races() {\n  const today = new Date();\n  today.setHours(0, 0, 0, 0); // Set the time to 00:00:00 for accurate comparison\n\n  const formattedRaces = raceData.map(race => {\n    const parts = race.date.split(' ');\n    const days = parts[0].split('-');\n    const month = parts[1];\n    const formattedDate = days.length > 1 ? `${month} ${days[0]}-${days[1]}` : `${month} ${days[0]}`;\n    const raceDate = new Date(Date.parse(`${month} ${days[0]}, ${new Date().getFullYear()}`)); // Use only the first day in the range\n    const isFuture = raceDate > today;\n    return {\n      ...race,\n      date: formattedDate,\n      isFuture,\n      raceDate\n    };\n  }).sort((a, b) => a.raceDate.getTime() - b.raceDate.getTime()); // Convert the dates to timestamps before subtracting them\n  const races = formattedRaces;\n  return <>\n      <div className=\"px-4 gradient-bg\">\n        <h1 className=\"text-2xl font-bold mb-4 sm:pt-16 md:pt-16 flex justify-center items-center\">Upcoming Races</h1>\n        {races.length === 0 ? <h1>More race events coming soon!</h1> : <div className=\"flex flex-wrap justify-center items-center\">\n            {races.map(race => <div key={race.raceName} className=\"flex justify-center items-center m-2 w-full md:w-[40%] lg:w-[40%] xl:w-[30%]\">\n                <RaceCard race={race} isFuture={race.isFuture} />\n              </div>)}\n          </div>}\n      </div>\n    </>;\n}\n_c = Races;\n;\nvar _c;\n$RefreshReg$(_c, \"Races\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_jsx_dev_runtime", "_c", "_c"]
}
